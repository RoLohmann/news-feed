import fs from "node:fs"; import path from "node:path"; import { XMLParser } from "fast-xml-parser";
const argv = new Map(); for(let i=2;i<process.argv.length;i+=2){ const k=process.argv[i]; const v=process.argv[i+1]; if(k&&v&&k.startsWith("--")) argv.set(k.slice(2), v); }
const DAYS=Number(argv.get("days")??"90"); const PATTERN=new RegExp(argv.get("pattern")??"bolsonaro","i"); const LIMIT=Number(argv.get("limit")??"3");
const sources = JSON.parse(fs.readFileSync(path.resolve(process.cwd(),"sources.json"),"utf-8"));
const parser = new XMLParser({ ignoreAttributes:false, attributeNamePrefix:"", allowBooleanAttributes:true, parseTagValue:true, parseAttributeValue:true });
const HEADERS={ "User-Agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124 Safari/537.36 LocalDebug", "Accept":"application/rss+xml, application/atom+xml, application/xml;q=0.9, */*;q=0.8", "Accept-Language":"pt-BR,pt;q=0.9,en;q=0.8"};
const cutoff=Date.now()-DAYS*24*60*60*1000;
function extractItems(json){ if(json?.rss?.channel?.item) return toArray(json.rss.channel.item); if(json?.feed?.entry) return toArray(json.feed.entry); if(json?.channel?.item) return toArray(json.channel.item); return []; } function toArray(x){ return Array.isArray(x)?x:(x?[x]:[]); } function pickDate(it){ const cand=it.pubDate||it.published||it.updated||it["dc:date"]; if(!cand) return null; const t=Date.parse(cand); return Number.isFinite(t)?t:null; }
let total=0, all=[]; console.log(`ðŸ”Ž Debugging ${sources.length} feeds â€” /${PATTERN.source}/, last ${DAYS} days\n`);
for(const src of sources){ const start=Date.now(); try{ const res = await fetch(src.feedUrl,{ headers: HEADERS }); const xml=await res.text(); const json=parser.parse(xml); const items=extractItems(json); const norm=items.map(it=>({ title:it.title||it["media:title"]||it["dc:title"]||"(sem tÃ­tulo)", link:it.link?.href||it.link||it.guid||"#", pubDate: pickDate(it), summary: it.description||it.summary||it["content:encoded"]||it.content||"", source: src.name })); const matched=norm.filter(x=>PATTERN.test(`${x.title} ${x.summary}`)).filter(x=>(x.pubDate?x.pubDate>=cutoff:true)); total += matched.length; all.push(...matched); console.log(`â€¢ ${src.name} parsed=${items.length} matched=${matched.length} (${Date.now()-start}ms)`); for(const s of matched.slice(0,Math.min(LIMIT, matched.length))) console.log(`   - ${s.title}`); }catch(e){ console.log(`â€¢ ${src.name} ERROR: ${e.message}`); } }
all.sort((a,b)=>((b.pubDate??0)-(a.pubDate??0))); console.log(`\nâœ… Total matched: ${total}`); for(const it of all.slice(0,10)){ const d=it.pubDate?new Date(it.pubDate).toISOString().slice(0,10):"no-date"; console.log(`- [${d}] ${it.title} (${it.source}) => ${it.link}`); }